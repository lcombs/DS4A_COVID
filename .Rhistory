beta_lag = update_beta_lag(beta_row, beta_column, beta_lag, Y, X, v, tau_lag, sigma_y)
print(beta_row)
print(beta_column)
print(beta_lag)
#bb = make_B_flat(beta_row, beta_column, beta_lag)
#bb = rbind(bb,cbind(I3,zero,zero), cbind(zero, I3, zero))
#bb = rbind(bb,cbind(I3,zero, zero, zero), cbind(zero, I3, zero, zero), cbind(zero,zero,I3,zero))
#unit_test = eigen(bb)
#print(abs(unit_test$values))
#draw new v
v = c(draw_v(sigma_y, beta_row, beta_column, beta_lag, tau_v, X, Y))
#print(v)
#draw new lambda_sq
lambda_sq = draw_lambda(lambda_a, lambda_b, tau_rows, tau_columns, tau_lag, tau_v)
#print(lambda_sq)
#calculate MSE
#B_flat = make_B_flat(beta_row, beta_column, beta_lag)
y_hat = make_y_mean(v, beta_row, beta_column, beta_lag, X)
#y_hat[,100:110]
error = Y-y_hat
#sum(error^2)
MSE[i] = sum(error^2)
#print(v)
#
# #calculate oos_MSE
# #B_flat = make_B_flat(beta_row, beta_column, beta_lag)
# oos_y_hat = make_y_mean(v, beta_row, beta_column, beta_lag, oos_X)
# #y_hat[,100:110]
# oos_error = oos_Y-oos_y_hat
# #sum(error^2)
# oos_MSE[i] = sum(oos_error^2)
# #print(v)
#
#store draws
beta_row_store[,,i] = beta_row
beta_column_store[,,i] = beta_column
beta_lag_store[,,i] = beta_lag
tau_rows_store[,,i] = tau_rows
tau_columns_store[,,i] = tau_columns
tau_lag_store[,,i] = tau_lag
v_store[i,] = v
sigma_y_store[i] = sigma_y
lambda_sq_store[i] = lambda_sq
}
# Draw new sigma
sigma_y = draw_sigma(v, beta_row, beta_column, beta_lag, tau_rows, tau_columns, tau_lag, sigma_c, sigma_d, K, Y,X)
print(sigma_y)
#sigma_y = 0.01
#draw new tau
inv_tau2 = draw_tau(lambda_sq, sigma_y, beta_row, beta_column, beta_lag, v)
#print(inv_tau2)
tau_rows = inv_tau2[[1]]
tau_columns = inv_tau2[[2]]
tau_lag = inv_tau2[[3]]
tau_v = inv_tau2[[4]]
print(inv_tau2)
tau_row_mu = sqrt(lambda_sq * sigma_y)/c(beta_row^2)
tau_column_mu = sqrt(lambda_sq * sigma_y)/c(beta_column^2)
tau_lag_mu = sqrt(lambda_sq * sigma_y)/c(beta_lag^2)
tau_v_mu = sqrt(lambda_sq * sigma_y)/c(v^2)
tau_lag_mu
beta_lag
lambda_sq
rinvgauss(20, mean = tau_lag_mu, shape = lambda_sq)
rinvgauss(20, mean = tau_lag_mu, shape = lambda_sq)
rinvgauss(20, mean = tau_lag_mu, shape = lambda_sq)
rinvgauss(20, mean = tau_lag_mu[1], shape = lambda_sq)
rinvgauss(20, mean = tau_lag_mu[1], shape = lambda_sq)
round(rinvgauss(20, mean = tau_lag_mu[1], shape = lambda_sq))
round(rinvgauss(20, mean = tau_lag_mu[1], shape = lambda_sq))
round(rinvgauss(20, mean = tau_lag_mu[1], shape = lambda_sq))
round(rinvgauss(20, mean = tau_lag_mu[1], shape = lambda_sq))
round(rinvgauss(20, mean = tau_lag_mu[1], shape = lambda_sq))
rinvgauss(20, mean = 10^30, shape = 2)
rinvgauss(20, mean = 10^30, shape = 2)
rinvgauss(20, mean = 10^30, shape = 2)
round(rinvgauss(20, mean = 10^30, shape = 2),2)
round(rinvgauss(20, mean = 10^30, shape = 2),2)
round(rinvgauss(20, mean = 10^30, shape = 2),2)
round(rinvgauss(20, mean = 10^30, shape = 2),2)
tau_rows = inv_tau2[[1]]
tau_columns = inv_tau2[[2]]
tau_lag = inv_tau2[[3]]
tau_v = inv_tau2[[4]]
beta_row = update_beta_row(beta_row, beta_column, beta_lag, Y, X, v, tau_rows, sigma_y)
beta_column = update_beta_column(beta_row, beta_column, beta_lag, Y, X, v, tau_rows, sigma_y)
beta_lag = update_beta_lag(beta_row, beta_column, beta_lag, Y, X, v, tau_lag, sigma_y)
print(beta_row)
print(beta_column)
print(beta_lag)
print(inv_tau2)
p =  4#set the experimental lag
K = 3
#create the X and Y for the experiment
J = cbind(I3, zero, zero)
#Y_t = Y_t[,(100-p):1000] #cut off nonstationary part and also include p prevalues
Y_total = J%*%Y_t
Y = Y_total[,(p+1):801]
X = make_X(Y_total[,1:801],p)
oos_Y = Y_total[,802:901]
oos_X = make_X(Y_total[,(802-p):901],p)
#Calculating the OLS solution to instantiate the factor matrices
XX = rbind(rep(1,ncol(X)), X) #add row of 1s for intercept. This is the X for the OLS solution
beta_h = Y %*% t(XX)%*%solve(XX%*%t(XX)) #OLS estimate
beta_initial = array(0, dim = c(3,3,p))
for(i in 0:(p-1)){
beta_initial[,,(i+1)] = beta_h[,(i*3+2):(i*3+4) ]
}
Y_hat = beta_h %*% XX
MSE_OLS = sum((Y-Y_hat)^2)
#find the PARAFAC decomposition of the OLS solution
beta_initialT <- as.tensor(beta_initial, drop = FALSE)
initial_decomp = cp(beta_initialT, num_components = 3, max_iter = 1000, tol = 1e-05)
#define and initialize the necessary parameters
R = 3 #the max rank of the parafac decomposition
sigma_y = 1 #variance of y
tau_rows = matrix(0,nrow = K, ncol = R)
tau_columns = matrix(0, nrow = K, ncol = R)
tau_lag = matrix(0, nrow = p, ncol = R)
tau_v = rep(0, K)
lambda_sq = 1
lambda_a = 1/2
lambda_b = 1/2
sigma_c = 1/2
sigma_d = 1/2
set.seed(1)
lam = nthroot(initial_decomp$lambdas,R)
beta_row = t(lam*t(initial_decomp$U[[1]]))
beta_column = t(lam*t(initial_decomp$U[[2]]))
beta_lag = t(lam*t(initial_decomp$U[[3]]))
v = beta_h[,1]
#for shrinkage experiment
#beta_lag = rbind(beta_lag, rep(.Machine$double.eps,3))
Niter = 1000
#make storage containers
beta_row_store = array(0,dim = c(K,R,Niter))
beta_column_store = array(0,dim = c(K,R,Niter))
beta_lag_store = array(0, dim = c(p,R,Niter))
tau_rows_store = array(0,dim = c(K,R,Niter))
tau_columns_store =array(0,dim = c(K,R,Niter))
tau_lag_store = array(0, dim = c(p,R,Niter))
tau_v_store = matrix(NA, nrow = Niter, ncol = K)
v_store = matrix(NA, nrow = Niter, ncol = K)
sigma_y_store = rep(0, Niter)
MSE = rep(0,Niter)
oos_MSE = rep(0,Niter)
lambda_sq_store = rep(0, Niter)
sigma_max = max(apply(Y,1,sd))^2
for(i in 1:8){
# Draw new sigma
sigma_y = draw_sigma(v, beta_row, beta_column, beta_lag, tau_rows, tau_columns, tau_lag, sigma_c, sigma_d, K, Y,X)
print(sigma_y)
#sigma_y = 0.01
#draw new tau
inv_tau2 = draw_tau(lambda_sq, sigma_y, beta_row, beta_column, beta_lag, v)
print(inv_tau2)
tau_rows = inv_tau2[[1]]
tau_columns = inv_tau2[[2]]
tau_lag = inv_tau2[[3]]
tau_v = inv_tau2[[4]]
beta_row = update_beta_row(beta_row, beta_column, beta_lag, Y, X, v, tau_rows, sigma_y)
beta_column = update_beta_column(beta_row, beta_column, beta_lag, Y, X, v, tau_rows, sigma_y)
beta_lag = update_beta_lag(beta_row, beta_column, beta_lag, Y, X, v, tau_lag, sigma_y)
print(beta_row)
print(beta_column)
print(beta_lag)
#bb = make_B_flat(beta_row, beta_column, beta_lag)
#bb = rbind(bb,cbind(I3,zero,zero), cbind(zero, I3, zero))
#bb = rbind(bb,cbind(I3,zero, zero, zero), cbind(zero, I3, zero, zero), cbind(zero,zero,I3,zero))
#unit_test = eigen(bb)
#print(abs(unit_test$values))
#draw new v
v = c(draw_v(sigma_y, beta_row, beta_column, beta_lag, tau_v, X, Y))
#print(v)
#draw new lambda_sq
lambda_sq = draw_lambda(lambda_a, lambda_b, tau_rows, tau_columns, tau_lag, tau_v)
#print(lambda_sq)
#calculate MSE
#B_flat = make_B_flat(beta_row, beta_column, beta_lag)
y_hat = make_y_mean(v, beta_row, beta_column, beta_lag, X)
#y_hat[,100:110]
error = Y-y_hat
#sum(error^2)
MSE[i] = sum(error^2)
#print(v)
#
# #calculate oos_MSE
# #B_flat = make_B_flat(beta_row, beta_column, beta_lag)
# oos_y_hat = make_y_mean(v, beta_row, beta_column, beta_lag, oos_X)
# #y_hat[,100:110]
# oos_error = oos_Y-oos_y_hat
# #sum(error^2)
# oos_MSE[i] = sum(oos_error^2)
# #print(v)
#
#store draws
beta_row_store[,,i] = beta_row
beta_column_store[,,i] = beta_column
beta_lag_store[,,i] = beta_lag
tau_rows_store[,,i] = tau_rows
tau_columns_store[,,i] = tau_columns
tau_lag_store[,,i] = tau_lag
v_store[i,] = v
sigma_y_store[i] = sigma_y
lambda_sq_store[i] = lambda_sq
}
#define and initialize the necessary parameters
R = 3 #the max rank of the parafac decomposition
sigma_y = 1 #variance of y
tau_rows = matrix(0,nrow = K, ncol = R)
tau_columns = matrix(0, nrow = K, ncol = R)
tau_lag = matrix(0, nrow = p, ncol = R)
tau_v = rep(0, K)
lambda_sq = 1
lambda_a = 1/2
lambda_b = 1/2
sigma_c = 1/2
sigma_d = 1/2
set.seed(1)
lam = nthroot(initial_decomp$lambdas,R)
beta_row = t(lam*t(initial_decomp$U[[1]]))
beta_column = t(lam*t(initial_decomp$U[[2]]))
beta_lag = t(lam*t(initial_decomp$U[[3]]))
v = beta_h[,1]
#for shrinkage experiment
#beta_lag = rbind(beta_lag, rep(.Machine$double.eps,3))
Niter = 1000
#make storage containers
beta_row_store = array(0,dim = c(K,R,Niter))
beta_column_store = array(0,dim = c(K,R,Niter))
beta_lag_store = array(0, dim = c(p,R,Niter))
tau_rows_store = array(0,dim = c(K,R,Niter))
tau_columns_store =array(0,dim = c(K,R,Niter))
tau_lag_store = array(0, dim = c(p,R,Niter))
tau_v_store = matrix(NA, nrow = Niter, ncol = K)
v_store = matrix(NA, nrow = Niter, ncol = K)
sigma_y_store = rep(0, Niter)
MSE = rep(0,Niter)
oos_MSE = rep(0,Niter)
lambda_sq_store = rep(0, Niter)
sigma_max = max(apply(Y,1,sd))^2
for(i in 1:8){
# Draw new sigma
sigma_y = draw_sigma(v, beta_row, beta_column, beta_lag, tau_rows, tau_columns, tau_lag, sigma_c, sigma_d, K, Y,X)
print(sigma_y)
#sigma_y = 0.01
#draw new tau
inv_tau2 = draw_tau(lambda_sq, sigma_y, beta_row, beta_column, beta_lag, v)
#print(inv_tau2)
tau_rows = inv_tau2[[1]]
tau_columns = inv_tau2[[2]]
tau_lag = inv_tau2[[3]]
tau_v = inv_tau2[[4]]
beta_row = update_beta_row(beta_row, beta_column, beta_lag, Y, X, v, tau_rows, sigma_y)
beta_column = update_beta_column(beta_row, beta_column, beta_lag, Y, X, v, tau_rows, sigma_y)
beta_lag = update_beta_lag(beta_row, beta_column, beta_lag, Y, X, v, tau_lag, sigma_y)
print(beta_row)
print(beta_column)
print(beta_lag)
#bb = make_B_flat(beta_row, beta_column, beta_lag)
#bb = rbind(bb,cbind(I3,zero,zero), cbind(zero, I3, zero))
#bb = rbind(bb,cbind(I3,zero, zero, zero), cbind(zero, I3, zero, zero), cbind(zero,zero,I3,zero))
#unit_test = eigen(bb)
#print(abs(unit_test$values))
#draw new v
v = c(draw_v(sigma_y, beta_row, beta_column, beta_lag, tau_v, X, Y))
#print(v)
#draw new lambda_sq
lambda_sq = draw_lambda(lambda_a, lambda_b, tau_rows, tau_columns, tau_lag, tau_v)
#print(lambda_sq)
#calculate MSE
#B_flat = make_B_flat(beta_row, beta_column, beta_lag)
y_hat = make_y_mean(v, beta_row, beta_column, beta_lag, X)
#y_hat[,100:110]
error = Y-y_hat
#sum(error^2)
MSE[i] = sum(error^2)
#print(v)
#
# #calculate oos_MSE
# #B_flat = make_B_flat(beta_row, beta_column, beta_lag)
# oos_y_hat = make_y_mean(v, beta_row, beta_column, beta_lag, oos_X)
# #y_hat[,100:110]
# oos_error = oos_Y-oos_y_hat
# #sum(error^2)
# oos_MSE[i] = sum(oos_error^2)
# #print(v)
#
#store draws
beta_row_store[,,i] = beta_row
beta_column_store[,,i] = beta_column
beta_lag_store[,,i] = beta_lag
tau_rows_store[,,i] = tau_rows
tau_columns_store[,,i] = tau_columns
tau_lag_store[,,i] = tau_lag
v_store[i,] = v
sigma_y_store[i] = sigma_y
lambda_sq_store[i] = lambda_sq
}
v
tau_v
lamda_sq
# Draw new sigma
sigma_y = draw_sigma(v, beta_row, beta_column, beta_lag, tau_rows, tau_columns, tau_lag, sigma_c, sigma_d, K, Y,X)
print(sigma_y)
#sigma_y = 0.01
#draw new tau
inv_tau2 = draw_tau(lambda_sq, sigma_y, beta_row, beta_column, beta_lag, v)
#print(inv_tau2)
tau_rows = inv_tau2[[1]]
tau_columns = inv_tau2[[2]]
tau_lag = inv_tau2[[3]]
tau_v = inv_tau2[[4]]
beta_row = update_beta_row(beta_row, beta_column, beta_lag, Y, X, v, tau_rows, sigma_y)
beta_column = update_beta_column(beta_row, beta_column, beta_lag, Y, X, v, tau_rows, sigma_y)
beta_lag = update_beta_lag(beta_row, beta_column, beta_lag, Y, X, v, tau_lag, sigma_y)
print(beta_row)
print(beta_column)
print(beta_lag)
round(rinvgauss(20, mean = .1, shape = 2),2)
#draw new v
v = c(draw_v(sigma_y, beta_row, beta_column, beta_lag, tau_v, X, Y))
#print(v)
#draw new lambda_sq
lambda_sq = draw_lambda(lambda_a, lambda_b, tau_rows, tau_columns, tau_lag, tau_v)
#print(lambda_sq)
#calculate MSE
#B_flat = make_B_flat(beta_row, beta_column, beta_lag)
y_hat = make_y_mean(v, beta_row, beta_column, beta_lag, X)
#y_hat[,100:110]
error = Y-y_hat
#sum(error^2)
MSE[i] = sum(error^2)
# #calculate oos_MSE
# #B_flat = make_B_flat(beta_row, beta_column, beta_lag)
# oos_y_hat = make_y_mean(v, beta_row, beta_column, beta_lag, oos_X)
# #y_hat[,100:110]
# oos_error = oos_Y-oos_y_hat
# #sum(error^2)
# oos_MSE[i] = sum(oos_error^2)
# #print(v)
#
#store draws
beta_row_store[,,i] = beta_row
# Draw new sigma
sigma_y = draw_sigma(v, beta_row, beta_column, beta_lag, tau_rows, tau_columns, tau_lag, sigma_c, sigma_d, K, Y,X)
print(sigma_y)
#sigma_y = 0.01
#draw new tau
inv_tau2 = draw_tau(lambda_sq, sigma_y, beta_row, beta_column, beta_lag, v)
print(inv_tau2)
tau_rows = inv_tau2[[1]]
tau_columns = inv_tau2[[2]]
tau_lag = inv_tau2[[3]]
tau_v = inv_tau2[[4]]
p =  4#set the experimental lag
K = 3
#create the X and Y for the experiment
J = cbind(I3, zero, zero)
#Y_t = Y_t[,(100-p):1000] #cut off nonstationary part and also include p prevalues
Y_total = J%*%Y_t
Y = Y_total[,(p+1):801]
X = make_X(Y_total[,1:801],p)
oos_Y = Y_total[,802:901]
oos_X = make_X(Y_total[,(802-p):901],p)
#Calculating the OLS solution to instantiate the factor matrices
XX = rbind(rep(1,ncol(X)), X) #add row of 1s for intercept. This is the X for the OLS solution
beta_h = Y %*% t(XX)%*%solve(XX%*%t(XX)) #OLS estimate
beta_initial = array(0, dim = c(3,3,p))
for(i in 0:(p-1)){
beta_initial[,,(i+1)] = beta_h[,(i*3+2):(i*3+4) ]
}
Y_hat = beta_h %*% XX
MSE_OLS = sum((Y-Y_hat)^2)
#find the PARAFAC decomposition of the OLS solution
beta_initialT <- as.tensor(beta_initial, drop = FALSE)
initial_decomp = cp(beta_initialT, num_components = 3, max_iter = 1000, tol = 1e-05)
#define and initialize the necessary parameters
R = 3 #the max rank of the parafac decomposition
sigma_y = 1 #variance of y
tau_rows = matrix(0,nrow = K, ncol = R)
tau_columns = matrix(0, nrow = K, ncol = R)
tau_lag = matrix(0, nrow = p, ncol = R)
tau_v = rep(0, K)
lambda_sq = 1
lambda_a = 1/2
lambda_b = 1/2
sigma_c = 1/2
sigma_d = 1/2
set.seed(1)
lam = nthroot(initial_decomp$lambdas,R)
beta_row = t(lam*t(initial_decomp$U[[1]]))
beta_column = t(lam*t(initial_decomp$U[[2]]))
beta_lag = t(lam*t(initial_decomp$U[[3]]))
v = beta_h[,1]
#for shrinkage experiment
#beta_lag = rbind(beta_lag, rep(.Machine$double.eps,3))
Niter = 1000
#make storage containers
beta_row_store = array(0,dim = c(K,R,Niter))
beta_column_store = array(0,dim = c(K,R,Niter))
beta_lag_store = array(0, dim = c(p,R,Niter))
tau_rows_store = array(0,dim = c(K,R,Niter))
tau_columns_store =array(0,dim = c(K,R,Niter))
tau_lag_store = array(0, dim = c(p,R,Niter))
tau_v_store = matrix(NA, nrow = Niter, ncol = K)
v_store = matrix(NA, nrow = Niter, ncol = K)
sigma_y_store = rep(0, Niter)
MSE = rep(0,Niter)
oos_MSE = rep(0,Niter)
lambda_sq_store = rep(0, Niter)
sigma_max = max(apply(Y,1,sd))^2
for(i in 1:1000){
# Draw new sigma
sigma_y = draw_sigma(v, beta_row, beta_column, beta_lag, tau_rows, tau_columns, tau_lag, sigma_c, sigma_d, K, Y,X)
print(sigma_y)
#sigma_y = 0.01
#draw new tau
inv_tau2 = draw_tau(lambda_sq, sigma_y, beta_row, beta_column, beta_lag, v)
#print(inv_tau2)
tau_rows = inv_tau2[[1]]
tau_columns = inv_tau2[[2]]
tau_lag = inv_tau2[[3]]
tau_v = inv_tau2[[4]]
beta_row = update_beta_row(beta_row, beta_column, beta_lag, Y, X, v, tau_rows, sigma_y)
beta_column = update_beta_column(beta_row, beta_column, beta_lag, Y, X, v, tau_rows, sigma_y)
beta_lag = update_beta_lag(beta_row, beta_column, beta_lag, Y, X, v, tau_lag, sigma_y)
#
#   print(beta_row)
#   print(beta_column)
#   print(beta_lag)
#bb = make_B_flat(beta_row, beta_column, beta_lag)
#bb = rbind(bb,cbind(I3,zero,zero), cbind(zero, I3, zero))
#bb = rbind(bb,cbind(I3,zero, zero, zero), cbind(zero, I3, zero, zero), cbind(zero,zero,I3,zero))
#unit_test = eigen(bb)
#print(abs(unit_test$values))
#draw new v
v = c(draw_v(sigma_y, beta_row, beta_column, beta_lag, tau_v, X, Y))
#print(v)
#draw new lambda_sq
lambda_sq = draw_lambda(lambda_a, lambda_b, tau_rows, tau_columns, tau_lag, tau_v)
#print(lambda_sq)
#calculate MSE
#B_flat = make_B_flat(beta_row, beta_column, beta_lag)
y_hat = make_y_mean(v, beta_row, beta_column, beta_lag, X)
#y_hat[,100:110]
error = Y-y_hat
#sum(error^2)
MSE[i] = sum(error^2)
#print(v)
#
# #calculate oos_MSE
# #B_flat = make_B_flat(beta_row, beta_column, beta_lag)
# oos_y_hat = make_y_mean(v, beta_row, beta_column, beta_lag, oos_X)
# #y_hat[,100:110]
# oos_error = oos_Y-oos_y_hat
# #sum(error^2)
# oos_MSE[i] = sum(oos_error^2)
# #print(v)
#
#store draws
beta_row_store[,,i] = beta_row
beta_column_store[,,i] = beta_column
beta_lag_store[,,i] = beta_lag
tau_rows_store[,,i] = tau_rows
tau_columns_store[,,i] = tau_columns
tau_lag_store[,,i] = tau_lag
v_store[i,] = v
sigma_y_store[i] = sigma_y
lambda_sq_store[i] = lambda_sq
}
plot(sigma_y_store)
plot.ts(v_store)
plot(MSE)
plot(lambda_sq_store)
beta_lag
beta_row
beta_column
k = nrow(Y)
p = nrow(X)/k
R = ncol(beta_row)
r=1
B_others = make_B_flat(beta_row[,-r], beta_column[,-r], beta_lag[,-r])
beta_others = matrix(outer(beta_column[,r],beta_lag[,r]), nrow = 1)
H = array(0,dim=c(k,k,T))
y_affected = Y - v - B_others %*% X
y_affected
Y[,1:10]
v
B_others
library(plm)
###Load the data
data <- read.csv(file=paste(path,'/data/all_data_clean.csv', sep = ''), header=TRUE, sep=",")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
path <- getwd()
###Load the data
data <- read.csv(file=paste(path,'/data/all_data_clean.csv', sep = ''), header=TRUE, sep=",")
path
###Load the data
data <- read.csv(file=paste(path,'/all_data_clean.csv', sep = ''), header=TRUE, sep=",")
unique(data$state)
is.na(data.State)
is.na(data$state)
View(data)
count(is.na(data$building_percentage))
which(is.na(data$building_percentage))
data_sub = data[-which(is.na(data$building_percentage))]
dim(data)
dim(data_sub)
data_sub = data[-which(is.na(data$building_percentage)),]
dim(data_sub)
unique(data_sub$state)
